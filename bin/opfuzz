#! /usr/bin/env python3

# MIT License
#
# Copyright (c) [2020 - 2021] The yinyang authors
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import sys
import signal
import inspect
import os

from pathlib import Path
path = Path(__file__)
rootpath = str(path.parent.absolute().parent)
sys.path.append(rootpath)

from src.args import *  

from src.modules.exitcodes import *   
from src.modules.Fuzzer import Fuzzer
from src.modules.exitcodes import *


short_description="""opfuzz -- a differential fuzzer for SMT solvers [version: 0.3 (dallda)]""" 
usage=""" opfuzz [options] solver_clis seed_file   [optionally, more seed files]     
       opfuzz [options] solver_clis seed_folder [optionally, more seed folders]     
     
       solver_clis := "solver_cli1;solver_cli2;...;solver_clik"
"""

long_description="""
opfuzz is a tool for finding bugs in SMT solver by generating mutant SMT-LIB 
scripts from a set of seed SMT-LIB scripts (.smt2 files) and then cross-check 
the results of the solvers. opfuzz realizes type-aware operator mutations.  

Example (basic usage): 
$ opfuzz "z3 model_validate=true;cvc4 --check-models -m -i -q" benchmarks 
<TODO: paste tool output>

This will by default randomly select smt2 files from the folder `./benchmarks` 
and generate 300 mutants per file. If a bug has been found, opfuzz will store 
it in `./bugs`. You can use the shortcut CTRL+C to terminate opfuzz manually.

For a listing of options, use opfuzz --help."""


help_text="""
options:
    -i <N>,  --iterations <N>   
            iterations per seed (default: 300)

    -l <path>, --logfolder <path>  
            log folder (default: ./logs)

    -t <secs>, --timeout <secs>
            timeout per SMT solver call in seconds (default: 8)

    -b <path>, --bugsfolder <path> 
            set bug folder (default: ./bugs)

    -s <path>, --scratchfolder <path> 
            temp folder to dump mutants. (default: ./scratch)

    -c <file>, --config <file> 
            set custom operator mutation config file

    -L <bytes>, --limit <bytes> 
            file size limit on seed formula in bytes (default: 100000)

    -q, --quiet     do not print statistics and other output
    -v, --version   show version number and exit
    -h, --help      show this help message and exit
"""

detailed_explanation="""
opfuzz is a mutation-based fuzzer, i.e. it mutates a set of seed formulas using 
type-aware operator mutations and then uses the mutated formulas as the test 
seeds for SMT solvers. It can so detect soundness bugs, invalid model bugs, 
crashes, segfaults, etc. opfuzz's mutation strategy generates mutants by 
interchanging operators, e.g, =, distinct, +, -,  *, / by one another. opfuzz is 
based on differential testing, i.e. it needs at least two SMT solvers to 
crosscheck their results. 

opfuzz can run in either directory or file mode. In directory mode, it reads 
its SMT-LIB seed files (extension: .smt2) from a directory.  

Example 1 (basic usage):
$ opfuzz "z3 model_validate=true;cvc4 --check-models -m -i -q" benchmarks

opfuzz will then randomly select formulas from the folder ./benchmarks. 
By default SMT-LIB files larger than 100k will be ignored. opfuzz will generate 
300 mutants per seed formula and will run in an infinite loop. You can use the 
shortcut CTRL+C to terminate opfuzz manually. If a bug has been found, the bug 
trigger is stored in ./bugs.

Example 2 (finding a bug with opfuzz):


"""
def print_stats():
    fuzzer.statistic.printsum()
    if fuzzer.statistic.crashes + fuzzer.statistic.soundness == 0:
        exit(OK_NOBUGS)
    exit(OK_BUGS)


def control_c(sig, frame):
    print("\b\b\rUser interrupt", flush=True)
    print_stats()


if __name__ == "__main__":
    rootpath = "/".join(__file__.split('/')[:-2])

    class ArgumentParser(argparse.ArgumentParser):
        def error(self, message):
            print("usage:"+usage,flush=True)
            self.exit(ERR_USAGE,'error: %s\nFor a listing of options, use %s --help\n' % (message,self.prog))
            

    parser = ArgumentParser(
            description="",
            usage=usage,
            formatter_class=argparse.RawDescriptionHelpFormatter,
            add_help=False
    )
    parser.add_argument(
        "SOLVER_CLIS",
        metavar="solver_clis",
    )
    parser.add_argument(
        "PATH_TO_SEEDS",
        metavar="seed_file/seed_folder",
    )
    parser.add_argument(
        "-i", "--iterations",
        default=30,
        metavar="number",
        type=int,
    )
    #TODO: bother user with it or not?
    parser.add_argument( 
        "-m", "--modulo",
        default=2,
        metavar="number",
        type=int,
    )
    parser.add_argument(
        "-l","--logfolder",
        metavar="path_path_to_folder",
        default=rootpath+"/logs",
    )
    parser.add_argument(
        '-v', '--version', 
        action='version',
        version='%(prog)s 0.3 (fffff)', 
    )
    parser.add_argument('-h', '--help', 
            action='help', 
            default=argparse.SUPPRESS,
    )
    parser.add_argument(
         "-t", "--timeout",
        default=8,
        metavar="secs",
        type=int,
    )
    parser.add_argument(
        "-b","--bugsfolder",
        metavar="path_to_folder",
        default=rootpath+"/bugs",
    )
    parser.add_argument(
        "-s","--scratchfolder",
        metavar="path_to_folder",
        default=rootpath+"/scratch",
    )
    parser.add_argument(
        "-c","--config",
        metavar="path_to_file",
        default=rootpath+"/config/operator_mutations.txt",
    )
    parser.add_argument(
        "-q", "--quiet",
        action='store_true',
    )
    parser.add_argument(
        "-L", "--file-size-limit",
        metavar="num_bytes", 
        default=100000,
        type=int,
    )

    if len(sys.argv) == 1:
        #TODO:version number and commit 
        print(short_description+"\n\nusage:"+usage+long_description)
        exit(ERR_USAGE)
    elif "-h" in sys.argv or "--help" in sys.argv:
        print(short_description)
        print(detailed_explanation)
        print(help_text)
        print("usage:"+usage)
        exit(OK_NOBUGS)
    else:
        args = run_checks(parser, "opfuzz")
        signal.signal(signal.SIGINT, control_c)

        try:
            fuzzer = Fuzzer(args, "opfuzz")
            fuzzer.run()
            #TODO: exit code
        except Exception as e:
            fn = inspect.trace()[-1].filename
            lineno = inspect.trace()[-1].lineno
            print("Runtime error at %s:%s" %(fn,lineno))
            print("msg: "+str(e))
            print("cmd: "+ ' '.join(sys.argv[:-2])+" "+'"'+ sys.argv[-2] +'"'+" "+sys.argv[-1])
            print("version: yinyang v0.2.0") #TODO: Do not hardcode
            print("Please file an issue: https://github.com/testsmt/yinyang/issues")
            exit(ERR_INTERNAL)

